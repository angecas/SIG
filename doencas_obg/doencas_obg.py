# -*- coding: utf-8 -*-
"""
/***************************************************************************
 doencas_obrigatorias
                                 A QGIS plugin
 Quantidade de ocorrências por zona de doença de publicação obrigatória
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-01
        git sha              : $Format:%H$
        copyright            : (C) 2021 by AutoGis Corporation
        email                : angecas91@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.gui import QgsRubberBand
from qgis.utils import iface
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtGui import *
from qgis.core import QgsVectorLayer
from qgis.core import QgsProject, QgsSymbol, QgsRendererRange, QgsGraduatedSymbolRenderer, QgsApplication, QgsRasterLayer
import processing
from qgis.PyQt import QtGui




# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .doencas_obg_dialog import doencas_obrigatoriasDialog
import os.path
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *


# Import the code for the dialog
from .doencas_obg_dialog import doencas_obrigatoriasDialog
import os.path
import os
import sys
from qgis.utils import iface
from qgis.core import QgsVectorLayer


import processing
    #chave da api
    #key='5e1bfedda2a033fcda32e017b5675341c1037d265e25aefaf7e677c5'
import requests
import json
import csv

import os
import sys




data = os.path.join(os.path.expanduser('~'), 'QGIS')
if not os.path.exists(data):
    os.mkdir(data)
else:
    pass

url='https://github.com/brunasimaens/QGIS-2021/blob/main/nuts3.gpkg'
r=requests.get(url, verify=False)
f = open(os.path.join(data, 'nuts3.gpkg'),'wb')
f.write(r.content)

class doencas_obrigatorias:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'doencas_obrigatorias_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&doencas_obrigatorias')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('doencas_obrigatorias', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        #icon_path = ':/plugins/doencas_obg/icon.svg'
        icon_path = ''
        #icon_path = ':/plugins/doencas_obg/heartbeat.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Doenças de Declaração Obrigatória'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&doencas_obrigatorias'),
                action)
            self.iface.removeToolBarIcon(action)

    def test_cancel(self):
        self.close()


    def todas_d(self):
        tot_d=[]
        url='https://transparencia.sns.gov.pt/api/records/1.0/search/?dataset=doencas-de-declaracao-obrigatoria&q=&rows=200&sort=tempo'
        r=requests.get(url)
        js=r.json()


        L=js['records']
        for el in L:
            f=el['fields']
            d_obg=f['doenca_de_declaracao_obrigatoria']
            if d_obg not in tot_d:

                tot_d.append(d_obg)

        return tot_d


    #esp='Hepatite+A' #fzr uma lista com todas as possibilidades?o utilizador seleciona uma opçao/botao com o valor correspondente?
    def seleciona_d(self, esp):

        url='https://transparencia.sns.gov.pt/api/records/1.0/search/?dataset=doencas-de-declaracao-obrigatoria&q=&sort=tempo&facet=residencia_nut_iii&facet=doenca_de_declaracao_obrigatoria&refine.doenca_de_declaracao_obrigatoria={esp}'.format(esp=esp)
        r=requests.get(url, verify=False)
        conteudo=r.content
        js=r.json()
        imp=js['facet_groups'] # valores associados que são os que nos interessam para o csv
        recs=js['records']
        dic=imp[0]

        lis=dic['facets']

        row_list=[['NUTS3', 'OCORRENCIAS']]
        for el in lis:
            row_list.append([el['name'], el['count']])


        with open (os.path.join(data, esp+'.csv'),  'w', encoding="utf8", newline='') as f:
        #with open( data'/select.csv', 'w', encoding="utf8", newline='') as f:
        #with open('C:\\Users\\angec\\gis\\angelica_select.csv', 'w', newline='') as f:
            wt=csv.writer(f, delimiter=',')
            wt.writerows(row_list)

        #layer = iface.addVectorLayer('C:\\Users\\angec\\gis\\angelica_select.csv', "doencas_selecionadas", "ogr")
        layer = iface.addVectorLayer(os.path.join(data, esp+'.csv'), "CSV", "ogr")
        if not layer:
            pass
            #print("Layer failed to load!")


    def join_layer(self, nome_doenca):

        from qgis.core import QgsProject, QgsPalLayerSettings, QgsTextFormat, QgsTextBufferSettings, QgsVectorLayerSimpleLabeling

        nuts = iface.addVectorLayer('/vsicurl/https://raw.githubusercontent.com/brunasimaens/QGIS-2021/9318fdfcfc8079974b6c7db23c3fc2de1c0721ee/nuts3.gpkg', "nuts3", "ogr")

        id = nuts.id()

        path_csv = (os.path.join(data, nome_doenca+'.csv'))
        path_output = os.path.join(data, nome_doenca+'.shp')

        params = { 'INPUT': nuts, 'FIELD': "Areas_Fr_4", 'INPUT_2': path_csv,'FIELD_2': "NUTS3",'OUTPUT': path_output }

        res = processing.run("native:joinattributestable",params)
        layer = QgsVectorLayer(res['OUTPUT'])
        layer = iface.addVectorLayer(os.path.join(data, nome_doenca+'.shp'), nome_doenca, "ogr")

        QgsProject.instance().removeMapLayer(id)


        layer_settings  = QgsPalLayerSettings()
        text_format = QgsTextFormat()
        text_format.setFont(QFont("Arial", 12))
        text_format.setSize(12)
        buffer_settings = QgsTextBufferSettings()
        buffer_settings.setEnabled(True)
        buffer_settings.setSize(0.10)
        buffer_settings.setColor(QColor("black"))

        text_format.setBuffer(buffer_settings)
        layer_settings.setFormat(text_format)

        layer_settings.isExpression = True
        layer_settings.fieldName = " Areas_Fr_4 ||': ' ||coalesce( OCORRENCIA, '0')"
        layer_settings.placement = 4
        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
        layer.setLabelsEnabled(True)
        layer.setLabeling(layer_settings)
        layer.triggerRepaint()


        myTargetField = "coalesce( OCORRENCIA, '0')"
        myRangeList = []
        myOpacity = 1

        myMin = 0
        myMax = 30.0
        myLabel = '0-10 casos'
        myColour = QtGui.QColor('#f58c8c')
        mySymbol0 = QgsSymbol.defaultSymbol(layer.geometryType())
        mySymbol0.setColor(myColour)
        mySymbol0.setOpacity(myOpacity)
        myRange0 = QgsRendererRange(myMin, myMax, mySymbol0, myLabel)
        myRangeList.append(myRange0)

        myMin1 = 30.0
        myMax1 = 70.0
        myLabel = '30-70 casos'
        myColour = QtGui.QColor('#f55b5b')
        mySymbol1 = QgsSymbol.defaultSymbol(layer.geometryType())
        mySymbol1.setColor(myColour)
        mySymbol1.setOpacity(myOpacity)
        myRange1 = QgsRendererRange(myMin1, myMax1, mySymbol1, myLabel)
        myRangeList.append(myRange1)



        myMin2 = 70.0
        myMax2 = 110.0
        myLabel2 = '70-110 casos'
        myColour = QtGui.QColor('#e33434')
        mySymbol2 = QgsSymbol.defaultSymbol(layer.geometryType())
        mySymbol2.setColor(myColour)
        mySymbol2.setOpacity(myOpacity)
        myRange2 = QgsRendererRange(myMin2, myMax2, mySymbol2, myLabel2)
        myRangeList.append(myRange2)


        myMin3 = 110.0
        myMax3 = 170.0
        myLabel3 = '110-170 casos'
        myColour = QtGui.QColor('#c71414')
        mySymbol3 = QgsSymbol.defaultSymbol(layer.geometryType())
        mySymbol3.setColor(myColour)
        mySymbol3.setOpacity(myOpacity)
        myRange3 = QgsRendererRange(myMin3, myMax3, mySymbol3, myLabel3)
        myRangeList.append(myRange3)


        myMin4 = 170.0
        myMax4 = 10000.0
        myLabel4 = 'Acima de 170 casos'
        myColour = QtGui.QColor('#960b0b')
        mySymbol4 = QgsSymbol.defaultSymbol(layer.geometryType())
        mySymbol4.setColor(myColour)
        mySymbol4.setOpacity(myOpacity)
        myRange4 = QgsRendererRange(myMin4, myMax4, mySymbol4, myLabel4)
        myRangeList.append(myRange4)

        myRenderer = QgsGraduatedSymbolRenderer('', myRangeList)
        myClassificationMethod = QgsApplication.classificationMethodRegistry().method("EqualInterval")
        myRenderer.setClassificationMethod(myClassificationMethod)
        myRenderer.setClassAttribute(myTargetField)
        layer.setRenderer(myRenderer)



    def labels(self, layer):
        from qgis.core import QgsProject, QgsPalLayerSettings, QgsTextFormat, QgsTextBufferSettings, QgsVectorLayerSimpleLabeling


        for layer in QgsProject.instance().mapLayers().values():
            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            text_format.setFont(QFont("Arial", 12))
            text_format.setSize(12)
            buffer_settings = QgsTextBufferSettings()
            buffer_settings.setEnabled(True)
            buffer_settings.setSize(0.10)
            buffer_settings.setColor(QColor("black"))

            text_format.setBuffer(buffer_settings)
            layer_settings.setFormat(text_format)

            layer_settings.isExpression = True
            layer_settings.fieldName = " Areas_Fr_4 ||': ' ||coalesce( OCORRENCIA, '0')"
            layer_settings.placement = 4
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            layer.setLabelsEnabled(True)
            layer.setLabeling(layer_settings)
            layer.triggerRepaint()


        my_layer = layer
        myTargetField = 'OCORRENCIA'
        myRangeList = []
        myOpacity = 1
        myMin = 10.0
        myMax = 50.0
        myLabel = 'Pouco'
        myColour = QtGui.QColor('#ffee00')
        mySymbol1 = QgsSymbol.defaultSymbol(my_layer.geometryType())
        mySymbol1.setColor(myColour)
        mySymbol1.setOpacity(myOpacity)
        myRange1 = QgsRendererRange(myMin, myMax, mySymbol1, myLabel)
        myRangeList.append(myRange1)



        myMin2 = 50.0
        myMax2 = 100.0
        myLabel2 = 'Medio'
        myColour = QtGui.QColor('#00eeff')
        mySymbol2 = QgsSymbol.defaultSymbol(my_layer.geometryType())
        mySymbol2.setColor(myColour)
        mySymbol2.setOpacity(myOpacity)
        myRange2 = QgsRendererRange(myMin2, myMax2, mySymbol2, myLabel2)
        myRangeList.append(myRange2)

        myRenderer = QgsGraduatedSymbolRenderer('', myRangeList)
        myClassificationMethod = QgsApplication.classificationMethodRegistry().method("EqualInterval")
        myRenderer.setClassificationMethod(myClassificationMethod)
        myRenderer.setClassAttribute(myTargetField)
        my_layer.setRenderer(myRenderer)

    def adiciona_mapa(self):

        url = 'type=xyz&url=http://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857'

        rlayer = QgsRasterLayer(url, 'OpenStreetMap', 'wms')
        QgsProject.instance().addMapLayer(rlayer)


    def apaga_ficheiros(self):
        dir = os.path.join(os.path.expanduser('~'), 'QGIS')
        for f in os.listdir(dir):
            if f != 'nuts3.gpkg':
                os.remove(os.path.join(dir, f))
        #print('DONE')

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            #self.first_start = False
            self.dlg = doencas_obrigatoriasDialog()
            self.dlg.deletefiles.clicked.connect(self.apaga_ficheiros)


            #Adiciona todas as doenças à combobox
            self.dlg.cb.clear()
            lista = self.todas_d()
            self.dlg.cb.addItems(lista)

            # show the dialog
            self.dlg.show()
            # Run the dialog event loop
            self.result = self.dlg.exec_()
            #print(result)
            #



        # See if OK was pressed
        if self.dlg.checkBox.isChecked() == True:
            if self.result == 1:
                doenca = unicode(self.dlg.cb.currentText())
                #print(doenca.encode("utf8"))
                self.adiciona_mapa()
                self.seleciona_d(doenca)
                self.join_layer(doenca)
                #self.dlg.deletefiles.clicked.connect(self.apaga_ficheiros)

            else:
                self.dlg.button1.clicked.connect(self.test_cancel)
                self.dlg.deletefiles.clicked.connect(self.apaga_ficheiros)
        else:
            if self.result == 1:
                doenca = unicode(self.dlg.cb.currentText())
                #print(doenca)
                #print("Doença Selecionada: " + doenca)
                self.seleciona_d(doenca)
                #self.dlg.deletefiles.clicked.connect(self.apaga_ficheiros)
            else:
                self.dlg.button1.clicked.connect(self.test_cancel)
                #self.dlg.deletefiles.clicked.connect(self.apaga_ficheiros)





        #self.labels(layer)
